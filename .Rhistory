users$relationship <- sapply (users$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv(users, "users.csv")
View(users)
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
users <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv(users, "23595856_23696989_22671778_twitter_moracarlos.csv")
#---------------------------------------------------------------#
#Time
users$created <- sapply (users$created, function(x) difftime(Sys.time(), x))
#Verified
users$verified <- sapply (users$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
users$statusesCount <- sapply (users$statusesCount, function(x) if (x==0) {x=1}else{x=x})
users$followersCount <- sapply (users$followersCount, function(x) if (x==0) {x=1}else{x=x})
users$favoritesCount <- sapply (users$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
users$friendsCount <- sapply (users$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
users$statusesCount <- sapply (users$statusesCount, function(x) log(x, base=exp(1)))
users$followersCount <- sapply (users$followersCount, function(x) log(x, base=exp(1)))
users$favoritesCount <- sapply (users$favoritesCount, function(x) log(x, base=exp(1)))
users$friendsCount <- sapply (users$friendsCount, function(x) log(x, base=exp(1)))
users$created <- sapply(users$created, function(x) log(x, base=exp(1)))
users$verified <- sapply (users$verified, function(x) log(x, base=exp(1)))
users$relationship <- sapply (users$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv(users, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
setwd("~/Desktop/twitteR")
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
users <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv(users, "23595856_23696989_22671778_twitter_moracarlos.csv")
#---------------------------------------------------------------#
#Time
users$created <- sapply (users$created, function(x) difftime(Sys.time(), x))
#Verified
users$verified <- sapply (users$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
users$statusesCount <- sapply (users$statusesCount, function(x) if (x==0) {x=1}else{x=x})
users$followersCount <- sapply (users$followersCount, function(x) if (x==0) {x=1}else{x=x})
users$favoritesCount <- sapply (users$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
users$friendsCount <- sapply (users$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
users$statusesCount <- sapply (users$statusesCount, function(x) log(x, base=exp(1)))
users$followersCount <- sapply (users$followersCount, function(x) log(x, base=exp(1)))
users$favoritesCount <- sapply (users$favoritesCount, function(x) log(x, base=exp(1)))
users$friendsCount <- sapply (users$friendsCount, function(x) log(x, base=exp(1)))
users$created <- sapply(users$created, function(x) log(x, base=exp(1)))
users$verified <- sapply (users$verified, function(x) log(x, base=exp(1)))
users$relationship <- sapply (users$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv(users, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
users <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv2(users, "23595856_23696989_22671778_twitter_moracarlos.csv")
#---------------------------------------------------------------#
#Time
users$created <- sapply (users$created, function(x) difftime(Sys.time(), x))
#Verified
users$verified <- sapply (users$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
users$statusesCount <- sapply (users$statusesCount, function(x) if (x==0) {x=1}else{x=x})
users$followersCount <- sapply (users$followersCount, function(x) if (x==0) {x=1}else{x=x})
users$favoritesCount <- sapply (users$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
users$friendsCount <- sapply (users$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
users$statusesCount <- sapply (users$statusesCount, function(x) log(x, base=exp(1)))
users$followersCount <- sapply (users$followersCount, function(x) log(x, base=exp(1)))
users$favoritesCount <- sapply (users$favoritesCount, function(x) log(x, base=exp(1)))
users$friendsCount <- sapply (users$friendsCount, function(x) log(x, base=exp(1)))
users$created <- sapply(users$created, function(x) log(x, base=exp(1)))
users$verified <- sapply (users$verified, function(x) log(x, base=exp(1)))
users$relationship <- sapply (users$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv2(users, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
install.packages('neuralnet')
library('neuralnet')
?neuralnet
#Accessing twitter
api_key <- "CY9yGxL0lv84ZrHI6rOQCbNOI"
api_secret <- "iRkslgkkHavoeSwBeQDpugTA5gUgJWaXL66rSAU7cJ3ODicoWN"
access_token <- "45983979-IrSB5XkJAITuYaEoHKEtVb1MoxzihrJ63zwSp2KHl"
access_token_secret <- "Rx8mE0EjNvdph9k0caWVYUi9iRN9ZG4KV96M9wd4DCW8G"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
#---------------------------------------------------------------#
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
userNeighbors.df[userNeighbors.df=="0"]<-1
userNeighbors.df$logFollowersCount <-log(userNeighbors.df$followersCount)
userNeighbors.df$logFriendsCount <-log(userNeighbors.df$friendsCount)
kObject.log <- data.frame(userNeighbors.df$logFriendsCount,userNeighbors.df$logFollowersCount)
mydata <- kObject.log
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#Run the K Means algorithm, specifying 4 centers
user2Means.log <- kmeans(kObject.log, centers=4, iter.max=10, nstart=100)
#Add the vector of specified clusters back to the original vector as a factor
userNeighbors.df$cluster <- factor(user2Means.log$cluster)
p2 <- nPlot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
?nPlot
??nPlot
p2 <- plot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
library(RCurl)
library(rCharts)
p2 <- nPlot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$yAxis(axisLabel = 'Friends Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
user <- getUser("moracarlos") #Set the username
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
userNeighbors.df[userNeighbors.df=="0"]<-1
userNeighbors.df = twListToDF()
userNeighbors.df = twListToDF(userNeighbors)
userNeighbors.df[userNeighbors.df=="0"]<-1
userNeighbors.df$logFollowersCount <-log(userNeighbors.df$followersCount)
userNeighbors.df$logFriendsCount <-log(userNeighbors.df$friendsCount)
kObject.log <- data.frame(userNeighbors.df$logFriendsCount,userNeighbors.df$logFollowersCount)
mydata <- kObject.log
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#Run the K Means algorithm, specifying 4 centers
user2Means.log <- kmeans(kObject.log, centers=4, iter.max=10, nstart=100)
#Add the vector of specified clusters back to the original vector as a factor
userNeighbors.df$cluster <- factor(user2Means.log$cluster)
library(RCurl)
library(rCharts)
p2 <- nPlot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$yAxis(axisLabel = 'Friends Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
View(kObject.log)
View(userNeighbors.df)
userNeighbors.df$logstatusesCount <-log(userNeighbors.df$statusesCount)
kObject.log <- data.frame(userNeighbors.df$logFriendsCount,userNeighbors.df$logFollowersCount, userNeighbors.df$logstatusesCount)
mydata <- kObject.log
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#Run the K Means algorithm, specifying 4 centers
user2Means.log <- kmeans(kObject.log, centers=4, iter.max=10, nstart=100)
#Add the vector of specified clusters back to the original vector as a factor
userNeighbors.df$cluster <- factor(user2Means.log$cluster)
library(RCurl)
library(rCharts)
p2 <- nPlot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$yAxis(axisLabel = 'Friends Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
p2 <- nPlot(logFollowersCount ~ logFriendsCount ~ logstatusesCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2 <- nPlot(logFollowersCount ~ logstatusesCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$yAxis(axisLabel = 'Friends Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
View(userNeighbors.df)
#Load packages
library(devtools)
library(httr)
library(twitteR)
#------------------------------------------------------------------#
#Accessing twitter
api_key <- "CY9yGxL0lv84ZrHI6rOQCbNOI"
api_secret <- "iRkslgkkHavoeSwBeQDpugTA5gUgJWaXL66rSAU7cJ3ODicoWN"
access_token <- "45983979-IrSB5XkJAITuYaEoHKEtVb1MoxzihrJ63zwSp2KHl"
access_token_secret <- "Rx8mE0EjNvdph9k0caWVYUi9iRN9ZG4KV96M9wd4DCW8G"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
#---------------------------------------------------------------#
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
#userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
users <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv2(users, "23595856_23696989_22671778_twitter_moracarlos.csv")
#---------------------------------------------------------------#
#Time
users$created <- sapply (users$created, function(x) difftime(Sys.time(), x))
#Verified
users$verified <- sapply (users$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
users$statusesCount <- sapply (users$statusesCount, function(x) if (x==0) {x=1}else{x=x})
users$followersCount <- sapply (users$followersCount, function(x) if (x==0) {x=1}else{x=x})
users$favoritesCount <- sapply (users$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
users$friendsCount <- sapply (users$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
users$statusesCount <- sapply (users$statusesCount, function(x) log(x, base=exp(1)))
users$followersCount <- sapply (users$followersCount, function(x) log(x, base=exp(1)))
users$favoritesCount <- sapply (users$favoritesCount, function(x) log(x, base=exp(1)))
users$friendsCount <- sapply (users$friendsCount, function(x) log(x, base=exp(1)))
users$created <- sapply(users$created, function(x) log(x, base=exp(1)))
users$verified <- sapply (users$verified, function(x) log(x, base=exp(1)))
users$relationship <- sapply (users$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv2(users, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
View(users)
mydata <- users[ ,2:]
mydata <- subset(users, select = 2:)
mydata <- subset(users, select = 2:8)
View(mydata)
plot(mydata, pch = 19)
InerciaIC = rep(0, 30)
for (k in 1:30) {
grupos = kmeans(mydata, k)
InerciaIC[k] = grupos$tot.withinss
}
plot(InerciaIC, col = "blue", type = "b")
mydata = users
plot(mydata, pch = 19)
InerciaIC = rep(0, 30)
for (k in 1:30) {
grupos = kmeans(mydata, k)
InerciaIC[k] = grupos$tot.withinss
}
plot(InerciaIC, col = "blue", type = "b")
View(mydata)
#Codo de Jambu
mydata <- subset(users, select = 2:8)
InerciaIC = rep(0, 30)
for (k in 1:30) {
grupos = kmeans(mydata, k)
InerciaIC[k] = grupos$tot.withinss
}
plot(InerciaIC, col = "green", type = "b")
plot(InerciaIC, col = "brown", type = "b")
plot(InerciaIC, col = "blue", type = "b")
plot(InerciaIC, col = "blue", type = "b")
?PCA
??PCA
?hclust
?kmeans
means <- kmeans(mydata, centers=4, iter.max=10, nstart=100)
means
means$cluster
View(users)
View(userNeighbors.df)
userNeighbors.df$cluster <- factor(means$cluster)
View(userNeighbors.df)
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
userNeighbors.subset <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
usersLog <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv2(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos.csv")
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
userNeighbors.subset <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
usersLog <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv2(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos.csv")
usersLog$created <- sapply (usersLog$created, function(x) difftime(Sys.time(), x))
#Verified
usersLog$verified <- sapply (usersLog$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
usersLog$statusesCount <- sapply (usersLog$statusesCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$followersCount <- sapply (usersLog$followersCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$favoritesCount <- sapply (usersLog$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$friendsCount <- sapply (usersLog$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
usersLog$statusesCount <- sapply (usersLog$statusesCount, function(x) log(x, base=exp(1)))
usersLog$followersCount <- sapply (usersLog$followersCount, function(x) log(x, base=exp(1)))
usersLog$favoritesCount <- sapply (usersLog$favoritesCount, function(x) log(x, base=exp(1)))
usersLog$friendsCount <- sapply (usersLog$friendsCount, function(x) log(x, base=exp(1)))
usersLog$created <- sapply(usersLog$created, function(x) log(x, base=exp(1)))
usersLog$verified <- sapply (usersLog$verified, function(x) log(x, base=exp(1)))
usersLog$relationship <- sapply (usersLog$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv2(usersLog, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
#---------------------------------------------------------------#
#Codo de Jambu
mydata <- subset(usersLog, select = 2:8)
InerciaIC = rep(0, 30)
for (k in 1:30) {
grupos = kmeans(mydata, k)
InerciaIC[k] = grupos$tot.withinss
}
plot(InerciaIC, col = "blue", type = "b")
means <- kmeans(mydata, centers=4, iter.max=10, nstart=100)
userNeighbors.subset$cluster <- factor(means$cluster)
View(userNeighbors.subset)
userNeighbors.subset
means
plot(means)
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos")
usersLog$cluster <- factor(means$cluster)
View(usersLog)
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos")
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos_logaritmo")
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos.csv")
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos_logaritmo.csv")
write.csv(usersLog, "23595856_23696989_22671778_twitter_moracarlos_grupos_logaritmo.csv")
?kmeans
View(usersLog)
means$centers
plot(menas$centers)
plot(menass$centers)
plot(means$centers)
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors.df = twListToDF(userNeighbors)
userNeighbors.df[userNeighbors.df=="0"]<-1
userNeighbors.df$logFollowersCount <-log(userNeighbors.df$followersCount)
userNeighbors.df$logFriendsCount <-log(userNeighbors.df$friendsCount)
kObject.log <- data.frame(userNeighbors.df$logFriendsCount,userNeighbors.df$logFollowersCount)
mydata <- kObject.log
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#Run the K Means algorithm, specifying 4 centers
user2Means.log <- kmeans(kObject.log, centers=4, iter.max=10, nstart=100)
#Add the vector of specified clusters back to the original vector as a factor
userNeighbors.df$cluster <- factor(user2Means.log$cluster)
library(RCurl)
library(rCharts)
p2 <- nPlot(logFollowersCount ~ logFriendsCount, group = 'cluster', data = userNeighbors.df, type = 'scatterChart')
p2$xAxis(axisLabel = 'Followers Count')
p2$yAxis(axisLabel = 'Friends Count')
p2$chart(tooltipContent = "#! function(key, x, y, e){
return e.point.screenName + ' Followers: ' + e.point.followersCount +' Friends: ' + e.point.friendsCount
} !#")
p2
setwd("~/Desktop/twitteR")
---------------------------------------------------------------#
#Load packages
library(devtools)
library(httr)
library(twitteR)
#------------------------------------------------------------------#
#Accessing twitter
api_key <- "CY9yGxL0lv84ZrHI6rOQCbNOI"
api_secret <- "iRkslgkkHavoeSwBeQDpugTA5gUgJWaXL66rSAU7cJ3ODicoWN"
access_token <- "45983979-IrSB5XkJAITuYaEoHKEtVb1MoxzihrJ63zwSp2KHl"
access_token_secret <- "Rx8mE0EjNvdph9k0caWVYUi9iRN9ZG4KV96M9wd4DCW8G"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
#---------------------------------------------------------------#
#Get user
user <- getUser("moracarlos") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
df1 = twListToDF(userFriends)
relationship = rep(1, times=length(userFriends))
df1 = cbind(df1, relationship)
df2 = twListToDF(userFollowers)
relationship = rep(2, times=length(userFollowers))
df2 = cbind(df2, relationship)
userNeighbors.df = merge(x = df1, y= df2, all=TRUE)
#---------------------------------------------------------------#
#Clean user
userNeighbors.subset <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
usersLog <- subset(userNeighbors.df, select = c('id','statusesCount', 'followersCount', 'favoritesCount', 'friendsCount', 'created', 'verified', 'relationship'))
#---------------------------------------------------------------#
#Save values
write.csv2(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos.csv")
#---------------------------------------------------------------#
#Time
usersLog$created <- sapply (usersLog$created, function(x) difftime(Sys.time(), x))
#Verified
usersLog$verified <- sapply (usersLog$verified, function(x) if (x==FALSE) {x=1} else{ x=2})
#Replace zero
usersLog$statusesCount <- sapply (usersLog$statusesCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$followersCount <- sapply (usersLog$followersCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$favoritesCount <- sapply (usersLog$favoritesCount, function(x) if (x==0) {x=1}else{x=x})
usersLog$friendsCount <- sapply (usersLog$friendsCount, function(x) if (x==0) {x=1}else{x=x})
#---------------------------------------------------------------#
#log(e)
usersLog$statusesCount <- sapply (usersLog$statusesCount, function(x) log(x, base=exp(1)))
usersLog$followersCount <- sapply (usersLog$followersCount, function(x) log(x, base=exp(1)))
usersLog$favoritesCount <- sapply (usersLog$favoritesCount, function(x) log(x, base=exp(1)))
usersLog$friendsCount <- sapply (usersLog$friendsCount, function(x) log(x, base=exp(1)))
usersLog$created <- sapply(usersLog$created, function(x) log(x, base=exp(1)))
usersLog$verified <- sapply (usersLog$verified, function(x) log(x, base=exp(1)))
usersLog$relationship <- sapply (usersLog$relationship, function(x) log(x, base=exp(1)))
#---------------------------------------------------------------#
#Write
write.csv2(usersLog, "23595856_23696989_22671778_twitter_moracarlos_logaritmo.csv")
#---------------------------------------------------------------#
#Codo de Jambu
mydata <- subset(usersLog, select = 2:8)
InerciaIC = rep(0, 30)
for (k in 1:30) {
grupos = kmeans(mydata, k)
InerciaIC[k] = grupos$tot.withinss
}
plot(InerciaIC, col = "blue", type = "b")
means <- kmeans(mydata, centers=4, iter.max=10, nstart=100)
userNeighbors.subset$cluster <- factor(means$cluster)
usersLog$cluster <- factor(means$cluster)
write.csv(userNeighbors.subset, "23595856_23696989_22671778_twitter_moracarlos_grupos_stats.csv")
write.csv(usersLog, "23595856_23696989_22671778_twitter_moracarlos_grupos_logaritmo_stats.csv")
plot(InerciaIC, col = "blue", type = "b")
library(plyr)
?count
count(usersLog$cluster)
usersByGroup = count(usersLog$cluster)
usersByGroup
usersByGroup[,2]
porc = lapply (usersByGroup[,2], function(x) (x*100)/length(usersLog$cluster))
porc
